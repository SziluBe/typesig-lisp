



(lambda (f)
  ((lambda (i) (i i))
   (lambda (i)
      (f (lambda (x)
            ((i i) x)
      )
      )
   )
  )
)



((lambda (f)((lambda (i) (i i))(lambda (i)(f (lambda (x)((i i) x)))))) (lambda (f) (lambda (n) (if n (* n (f (- n 1))) 1))) 2)



# F: (lambda (f) (lambda (n) (if n (* n (f (- n 1))) 1)))


((λf. λx.(if x == 0 then 1 else x * f                                                                                                           (x–1))) ((lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x))))) (λf. λx.(if x == 0 then 1 else x * f (x–1)))) 3)
(    (λx.(if x == 0 then 1 else x * ((lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x))))) (λf. λx.(if x == 0 then 1 else x * f (x–1)))) (x–1))) 3)
((       (if 3 == 0 then 1 else 3 * ((lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x))))) (λf. λx.(if x == 0 then 1 else x * f (x–1)))) (3–1))))
((       (if 3 == 0 then 1 else 3 * ((lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x))))) (λf. λx.(if x == 0 then 1 else x * f (x–1)))) 2)))
((       (                      3 * ((lambda (f) ((lambda (x) (f                                            (x x))) (lambda (x) (f                                            (x x))))) (λf. λx.(if x == 0 then 1 else x * f (x–1)))) 2)))
((       (                      3 *  (           ((lambda (x) ((λf. λx.(if x == 0 then 1 else x * f (x–1))) (x x))) (lambda (x) ((λf. λx.(if x == 0 then 1 else x * f (x–1))) (x x)))))                                               2)))
((       (                      3 *  (           ((lambda (x) (F (x x))) (lambda (x) (F (x x)))))                                               2)))
((       (                      3 *  (           (YF)                                           )                                               2)))
((       (                      3 *  (           ((((λf. λx.(if x == 0 then 1 else x * f (x–1))) ((lambda (x) ((λf. λx.(if x == 0 then 1 else x * f (x–1))) (x x))) (lambda (x) ((λf. λx.(if x == 0 then 1 else x * f (x–1))) (x x))))))  ))  2)))





("(VPrim If 2 ((lambda (x y) (VPrim Mul x y)<<[]>>) 2 ((lambda (x) ((i i) x)<<[i: ((lambda (i) (f (lambda (x) ((i i) x)))<<[f: ((lambda (f) (lambda (n) (if n (* n (f (- n 1))) 1)))),]>>)), f: ((lambda (f) (lambda (n) (if n (* n (f (- n 1))) 1)))),]>>) ((lambda (x y) (VPrim Sub x y)<<[]>>) 2 1))) 1)",[])






# Y: (lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x)))))


(lambda f (lambda x (f (x x)) (lambda x (f x x))) g)


# F: (lambda (f n) (if n (* n (f (- n 1))) 1))
# F: (lambda (f) (lambda (n) (if n (* n (f (- n 1))) 1)))

# Fact: YF
# 2 Factorial: YF 2

((lambda (f n) (if n (* n (f (- n 1))) 1)) ((lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x))))) (lambda (f n) (if n (* n (f (- n 1))) 1))) 2)

((lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x))))) (lambda (f n) (if n (* n (f (- n 1))) 1)) 2)


(let (Y (lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x)))))) (
    let (F (lambda (f) (lambda (n) (if n (* n (f (- n 1))) 1)))) (
        Y F 2
    )
))

(let (Y (lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x)))))) (let (F (lambda (f) (lambda (n) (if n (* n (f (- n 1))) 1)))) (Y F 2)))


((lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x))))) (lambda (g n) (if n (* n (g (- n 1))) 1)) 2)


((lambda (f) ((lambda (x) (f (x x))) (lambda (x) (f (x x)))) (lambda (g n) (if n (* n (g (- n 1))) 1))) 2)







# Fact: YF
# 2 Factorial: Y F 2
((lambda (f) ((lambda (x) (f x x)) (lambda (x) (f x x))))  (lambds (g n) (if n (* n (g (- n 1))) 1))  2)


# F: (lambda (g) (lambda (y) (if y (* y g (- y 1)) 1)))
# G: (lambda (g) (lambda (y) (if y (g (- y 1)) 1)))

# YG 2:
((lambda (f) ((lambda (x) (f x x)) (lambda (x) (f x x))))  (lambda (g) (lambda (y) (if y (g (- y 1)) 1)))  2)

# 2 Factorial; YF 2:
((lambda (f) ((lambda (x) (f x x)) (lambda (x) (f x x)))) (lambda (g) (lambda (y) (if y (* y g (- y 1)) 1))) 2)

f: (lambda (g) (lambda (y) (if y (* y g (- y 1)) 1)))

(((lambda (x) (f x x)) (lambda (x) (f x x))) 2)

x: (lambda (x) (f x x))

(((lambda (x) (f x x))) 2)
((lambda (x) (f x x)) 2)

x: 2

((f x x))
(f x x)
((lambda (g) (lambda (y) (if y (* y g (- y 1)) 1))) x x)




(define Y
  (lambda (f)
    ((lambda (i)
       (let ((i (f (lambda (x) (i x))))) ;; (let ((i expr)) i) locally defines i as expr
	     i))                             ;; non-recursively: thus i in expr is not expr
     #f)))



(let Y
  (lambda (f)
    ((lambda (i)
       (let  (i (f (lambda (x) (i x))))  i))
       ))
(let F
  (lambda (f n)
    (if n
      (* f (- n 1))
      1))
(let fact
    (Y F)
(fact 2)
)
)
)



(let Y (lambda (f) ((lambda (i) (let  (i (f (lambda (x) (i x)))) i)) )) (let F (lambda (f n) (if n (* f (- n 1)) 1)) (let fact (Y F) (fact 2))))

((lambda (f) ((lambda (i) (let  (i (f (lambda (x) (i x)))) i)) ))  (lambda (f n) (if n (* f (- n 1)) 1))  2)




(
(let Y
  (lambda (f)
    ((lambda (i) (i i))
     (lambda (i)
       (f (lambda (x)
	        ((i i) x))))))
(let F
  (lambda (f n)
    (if n
      (* f (- n 1))
      1))
(let fact (Y F)
fact 2
))))

(let Y (lambda (f) ((lambda (i) (i i)) (lambda (i) (f (lambda (x) ((i i) x)))))) (let F (lambda (f n) (if n (* f (- n 1)) 1)) (let fact (Y F) (fact 2))))

((lambda (f) ((lambda (i) (i i)) (lambda (i) (f (lambda (x) ((i i) x)))))) (lambda (f n) (if n (* f (- n 1)) 1)) 2)





-- (SExpr [
--   EV (VPrim Mul),
--   LInt 2,
--   SExpr [
--     EClosure ["x"] (SExpr [SExpr [LSym "i",LSym "i"],LSym "x"]) [("i",EClosure ["i"] (SExpr [LSym "f",SExpr [LSym "lambda",SExpr [LSym "x"],SExpr [SExpr [LSym "i",LSym "i"],LSym "x"]]]) [("f",SExpr [LSym "lambda",SExpr [LSym "f"],SExpr [LSym "lambda",SExpr [LSym "n"],SExpr [LSym "if",LSym "n",SExpr [LSym "*",LSym "n",SExpr [LSym "f",SExpr [LSym "-",LSym "n",LInt 1]]],LInt 1]]])]),("f",SExpr [LSym "lambda",SExpr [LSym "f"],SExpr [LSym "lambda",SExpr [LSym "n"],SExpr [LSym "if",LSym "n",SExpr [LSym "*",LSym "n",SExpr [LSym "f",SExpr [LSym "-",LSym "n",LInt 1]]],LInt 1]]])],
--     SExpr [
--       EClosure ["x","y"] (SExpr [EV (VPrim Sub),LSym "x",LSym "y"]) [],
--       LInt 2,
--       LInt 1]]],[])



-- (SExpr [
--   EV (VPrim If),LInt 2,
--     SExpr [
--       EClosure ["x","y"] (SExpr [EV (VPrim Mul),LSym "x",LSym "y"]) [],
--       LInt 2,
--       SExpr [
--         EClosure ["x"] (SExpr [SExpr [LSym "i",LSym "i"],LSym "x"])          [("i",EClosure ["i"] (SExpr [LSym "f",SExpr [LSym "lambda",SExpr [LSym "x"],SExpr [SExpr [LSym "i",LSym "i"],LSym "x"]]]) [("f",SExpr [LSym "lambda",SExpr [LSym "f"],SExpr [LSym "lambda",SExpr [LSym "n"],SExpr [LSym "if",LSym "n",SExpr [LSym "*",LSym "n",SExpr [LSym "f",SExpr [LSym "-",LSym "n",LInt 1]]],LInt 1]]])]),("f",SExpr [LSym "lambda",SExpr [LSym "f"],SExpr [LSym "lambda",SExpr [LSym "n"],SExpr [LSym "if",LSym "n",SExpr [LSym "*",LSym "n",SExpr [LSym "f",SExpr [LSym "-",LSym "n",LInt 1]]],LInt 1]]])],
--         SExpr [
--           EClosure ["x","y"] (SExpr [EV (VPrim Sub),LSym "x",LSym "y"]) [],LInt 2,LInt 1]
--       ]
--     ],
--     LInt 1
-- ],[])


-- -- How to handle things like:
-- -- ((* 3 f) 2)
-- -- ?
-- -- We need to propagate the arguments somehow if the outermost closure has no names left to bind
-- -- Currently it simplifies as such:
-- -- ((* 3 f) 2)
-- SExpr [EClosure [] (SExpr [EV (VPrim Mul), LInt 3, EClosure ["x"] (LSym "x") []]) [], LInt 2]
-- (SExpr [SExpr [EV (VPrim Mul),LInt 3,EClosure ["x"] (LSym "x") []],LInt 2],[])
-- (SExpr [SExpr [EClosure ["x","y"] (SExpr [EV (VPrim Mul),LSym "x",LSym "y"]) [],LInt 3,EClosure ["x"] (LSym "x") []],LInt 2],[])
-- (SExpr [EClosure [] (SExpr [EV (VPrim Mul),LSym "x",LSym "y"]) [("x",LInt 3),("y",EClosure ["x"] (LSym "x") [])],LInt 2],[])
-- ---
-- (SExpr [SExpr [EV (VPrim Mul),LSym "x",LSym "y"],LInt 2],[])
-- (SExpr [SExpr [EClosure ["x","y"] (SExpr [EV (VPrim Mul),LSym "x",LSym "y"]) [],LSym "x",LSym "y"],LInt 2],[])
-- (SExpr [EClosure [] (SExpr [EV (VPrim Mul),LSym "x",LSym "y"]) [("x",LSym "x"),("y",LSym "y")],LInt 2],[])
-- (SExpr [SExpr [EV (VPrim Mul),LSym "x",LSym "y"],LInt 2],[])


-- isDone (EV _, _) = True
-- isDone (EClosure _ _ _, _) = True
-- isDone _ = False

-- lookup'                  :: String -> [(String,Expr)] -> Maybe Expr
-- lookup' _key []          =  Nothing
-- lookup'  key ((x,y):xys)
--     | key == x = case y of
--                     LSym s -> lookup' s xys
--                     _ -> Just y
--     | otherwise          =  lookup key xys




-- -- Composition of closures
-- EClosure names (EClosure names' body env') env = EClosure (names' ++ names) body (env' ++ env)


-- feed :: Expr -> [Expr] -> Expr
-- feed (SExpr (EClosure names body env' : args')) args 

